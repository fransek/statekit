/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as TodoImport } from "./routes/todo";
import { Route as SharedImport } from "./routes/shared";
import { Route as PersistentImport } from "./routes/persistent";
import { Route as ContextImport } from "./routes/context";
import { Route as AsyncImport } from "./routes/async";
import { Route as IndexImport } from "./routes/index";

// Create/Update Routes

const TodoRoute = TodoImport.update({
  id: "/todo",
  path: "/todo",
  getParentRoute: () => rootRoute,
} as any);

const SharedRoute = SharedImport.update({
  id: "/shared",
  path: "/shared",
  getParentRoute: () => rootRoute,
} as any);

const PersistentRoute = PersistentImport.update({
  id: "/persistent",
  path: "/persistent",
  getParentRoute: () => rootRoute,
} as any);

const ContextRoute = ContextImport.update({
  id: "/context",
  path: "/context",
  getParentRoute: () => rootRoute,
} as any);

const AsyncRoute = AsyncImport.update({
  id: "/async",
  path: "/async",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/async": {
      id: "/async";
      path: "/async";
      fullPath: "/async";
      preLoaderRoute: typeof AsyncImport;
      parentRoute: typeof rootRoute;
    };
    "/context": {
      id: "/context";
      path: "/context";
      fullPath: "/context";
      preLoaderRoute: typeof ContextImport;
      parentRoute: typeof rootRoute;
    };
    "/persistent": {
      id: "/persistent";
      path: "/persistent";
      fullPath: "/persistent";
      preLoaderRoute: typeof PersistentImport;
      parentRoute: typeof rootRoute;
    };
    "/shared": {
      id: "/shared";
      path: "/shared";
      fullPath: "/shared";
      preLoaderRoute: typeof SharedImport;
      parentRoute: typeof rootRoute;
    };
    "/todo": {
      id: "/todo";
      path: "/todo";
      fullPath: "/todo";
      preLoaderRoute: typeof TodoImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/async": typeof AsyncRoute;
  "/context": typeof ContextRoute;
  "/persistent": typeof PersistentRoute;
  "/shared": typeof SharedRoute;
  "/todo": typeof TodoRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/async": typeof AsyncRoute;
  "/context": typeof ContextRoute;
  "/persistent": typeof PersistentRoute;
  "/shared": typeof SharedRoute;
  "/todo": typeof TodoRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/async": typeof AsyncRoute;
  "/context": typeof ContextRoute;
  "/persistent": typeof PersistentRoute;
  "/shared": typeof SharedRoute;
  "/todo": typeof TodoRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/async" | "/context" | "/persistent" | "/shared" | "/todo";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/async" | "/context" | "/persistent" | "/shared" | "/todo";
  id:
    | "__root__"
    | "/"
    | "/async"
    | "/context"
    | "/persistent"
    | "/shared"
    | "/todo";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AsyncRoute: typeof AsyncRoute;
  ContextRoute: typeof ContextRoute;
  PersistentRoute: typeof PersistentRoute;
  SharedRoute: typeof SharedRoute;
  TodoRoute: typeof TodoRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AsyncRoute: AsyncRoute,
  ContextRoute: ContextRoute,
  PersistentRoute: PersistentRoute,
  SharedRoute: SharedRoute,
  TodoRoute: TodoRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/async",
        "/context",
        "/persistent",
        "/shared",
        "/todo"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/async": {
      "filePath": "async.tsx"
    },
    "/context": {
      "filePath": "context.tsx"
    },
    "/persistent": {
      "filePath": "persistent.tsx"
    },
    "/shared": {
      "filePath": "shared.tsx"
    },
    "/todo": {
      "filePath": "todo.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
